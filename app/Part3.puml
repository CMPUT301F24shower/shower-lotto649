@startuml
title MainActivity Class Diagram

    class MainActivity {
        - BottomNavigationView bottomNavigationView
        - HomeFragment homeFragment
        - CameraFragment cameraFragment
        - AccountFragment accountFragment
        - FacilityFragment facilityFragment
        - BrowseEventsFragment browseEventsFragment
        - BrowseProfilesFragment browseProfilesFragment
        - BrowseFacilitiesFragment browseFacilitiesFragment
        - AdminAndUserFragment adminAndUserFragment

        + onCreate(Bundle savedInstanceState)
        + onNavigationItemSelected(MenuItem item) : boolean
        - checkUserAdminStatus(FirestoreIsAdminCallback firestoreIsAdminCallback)
        - checkUserEntrantStatus(FirestoreIsAdminCallback firestoreIsAdminCallback)
    }
    class MyApp {
        - userModel: UserModel
        - instance: MyApp
        - currentActivity: WeakReference<FragmentActivity>
        + getInstance(): MyApp
        + onCreate(): void
        + getUserModel(): UserModel
        + setCurrentActivity(activity: FragmentActivity): void
        + replaceFragment(fragment: Fragment): void
    }

    MyApp --> UserModel : holds
    MainActivity ..> FirestoreIsAdminCallback : uses
    MainActivity --> HomeFragment : contains
    MainActivity --> CameraFragment : contains
    MainActivity --> AccountFragment : contains
    MainActivity --> FacilityFragment : contains
    MainActivity --> BrowseEventsFragment : contains
    MainActivity --> BrowseProfilesFragment : contains
    MainActivity --> BrowseFacilitiesFragment : contains
    MainActivity --> AdminAndUserFragment : contains

    interface FirestoreUserCallback {
        + onCallback(name: String, email: String, phone: String): void
    }
    interface FirestoreIsAdminCallback {
        + onCallback(isAdmin: boolean): void
    }
    class QrCodeModel extends AbstractModel {
        + static generateForEvent(event: EventModel): Object
    }

    class UserModel extends AbstractModel {
        - String name
        - String email
        - String phone
        - boolean entrant
        - boolean organizer
        - boolean admin
        - String deviceId
        - FirebaseFirestore db
        - boolean savedToFirestore
        + UserModel()
        + UserModel(Context context, FirebaseFirestore db)
        + UserModel(Context context, String name, String email, String phone, FirebaseFirestore db)
        + UserModel(Context context, String name, String email)
        + void saveUserToFirestore(String name, String email, String phone)
        + void updateFirestore(String field, Object value)
        + String getName()
        + void setName(String name)
        + String getEmail()
        + void setEmail(String email)
        + String getPhone()
        + void setPhone(String phone)
        + void setEntrant(Boolean bool)
        + Boolean getEntrant()
        + void setOrganizer(Boolean bool)
        + Boolean getOrganizer()
        + void setAdmin(Boolean bool)
        + Boolean getAdmin()
        + String getDeviceId()
        + boolean getSavedToFirestore()
        + void setSavedToFirestore()
    }
    UserModel --> "1" EventModel : uses
    UserModel --> "1" FacilityModel : possibly interacts with
    UserModel --> "1" QrCodeModel : interacts with
    UserModel --> "1" FirebaseFirestore : interacts with
    UserModel -|> AbstractModel : inherits
    class EventModel {
        - String title
        - String facilityId
        - String organizerId
        - double cost
        - String description
        - int numberOfSpots
        - int numberOfMaxEntrants
        - Date startDate
        - Date endDate
        - Object posterImage
        - boolean geo
        - Object qrCode
        - ArrayList<UserModel> waitingList
        - FirebaseFirestore db
        - boolean savedToFirestore
        - String eventId

        + String getEventId()
        + void setDb(FirebaseFirestore db)
        + void saveEventToFirestore()
        + void removeEventFromFirestore()
        + void updateFirestore(String field, Object value)
        + void fetchFacility(FacilityCallback callback)
        + String getTitle()EventsModel --> "1" EventFetchCallback : Uses
                           EventsModel --> "1" MyEventsCallback : Uses
                           EventsModel --> "1" FirebaseFirestore : Uses
                           MyEventsCallback --> "1" EventModel : Returns
                           EventModel --> "1" FirebaseFirestore : Uses
        + void setTitle(String title)
        + String getFacilityId()
        + void setFacilityId(String facilityId)
        + String getOrganizerId()
        + void setOrganizerId(String organizerId)
        + double getCost()
        + void setCost(double cost)
        + String getDescription()
        + void setDescription(String description)
        + int getNumberOfSpots()
        + void setNumberOfSpots(int numberOfSpots)
        + int getNumberOfMaxEntrants()
        + void setNumberOfMaxEntrants(int numberOfMaxEntrants)
        + Date getStartDate()
        + void setStartDate(Date startDate)
        + Date getEndDate()
        + void setEndDate(Date endDate)
        + Object getPosterImage()
        + void setPosterImage(Object posterImage)
        + boolean getGeo()
        + void setGeo(boolean geo)
        + Object getQrCode()
        + void setQrCode(Object qrCode)
        + ArrayList<UserModel> getWaitingList()
        + boolean addToWaitingList(UserModel entrant)
    }

    interface FacilityCallback {
        + void onCallback(FacilityModel facility)
    }
    class EventsModel {
        - ArrayList<EventModel> myEvents
        - final FirebaseFirestore db
        + EventsModel()
        + static fetchEventsByOrganizerId(callback: EventFetchCallback, db: FirebaseFirestore)
        + getMyEvents(callback: MyEventsCallback)
    }
    class EventFetchCallback {
        + onCallback(events: List<DocumentSnapshot>)
    }

    class MyEventsCallback {
        + onEventsFetched(events: ArrayList<EventModel>)
    }

    class FacilityModel {
        - String facilityName
        - String address
        - String deviceId
        + FacilityModel(deviceId: String)
        + FacilityModel(deviceId: String, facilityName: String)
        + FacilityModel(deviceId: String, facilityName: String, address: String)
        + getFacilityName(): String
        + setFacilityName(facilityName: String): void
        + getAddress(): String
        + setAddress(address: String): void
        + getDeviceId(): String
    }
    interface AdminInterface {
        + remove(db: FirebaseFirestore, event: EventModel): void
        + removeImage(db: FirebaseFirestore, event: EventModel): void
        + remove(db: FirebaseFirestore, user: UserModel): void
        + removeImage(db: FirebaseFirestore, user: UserModel): void
        + remove(db: FirebaseFirestore, facility: FacilityModel): void
        + removeImage(db: FirebaseFirestore, facility: FacilityModel): void
        + remove(qrCode: QrCodeModel): void
        + browseEvents(db: FirebaseFirestore): ArrayList<EventModel>
        + browseProfiles(db: FirebaseFirestore): ArrayList<UserModel>
        + browseImages(db: FirebaseFirestore): ArrayList<Object>
    }
    AdminInterface --> EventModel : Uses
    AdminInterface --> UserModel : Uses
    AdminInterface --> FacilityModel : Uses
    AdminInterface --> QrCodeModel : Uses

    FacilityModel --> AbstractModel : Inherits
    FacilityModel --> MyApp : Uses
    MyApp --> UserModel : Uses
    FacilityModel --> UserModel : Dependent on deviceId
    FacilityModel --> AbstractModel : Inherits
    EventsModel --> "1" EventFetchCallback : Uses
    EventsModel --> "1" MyEventsCallback : Uses
    MyEventsCallback --> "1" EventModel : Returns
    EventModel --|> AbstractModel
    EventModel "1" *-- "0..*" UserModel : waitingList
    EventModel "1" *-- "1" QrCodeModel : qrCode

    class HomeFragment {
        - eventsController: EventsController
        - addButton: ExtendedFloatingActionButton
        - eventAdapter: EventArrayAdapter
        - events: EventsModel
        + HomeFragment()
        + onCreateView(inflater: LayoutInflater, container: ViewGroup, savedInstanceState: Bundle): View
    }
    class CameraFragment {
         + CameraFragment() : Public empty constructor for fragment instantiation
         + View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) : Creates and inflates fragment view
         --
         "Represents a fragment for camera-related functionality."
         "Inflates layout defined in fragment_camera.xml"
         "Part of bottom navigation bar implementation"
         "Code for bottom navigation bar adapted from GeeksforGeeks"
     }
    class AccountFragment {
            - AccountView accountView
            - AccountUserController userController
            - FirebaseFirestore db
            - UserModel user
            - TextInputLayout fullNameInputLayout
            - TextInputLayout emailInputLayout
            - TextInputLayout phoneNumberInputLayout
            - TextInputEditText fullNameEditText
            - TextInputEditText emailEditText
            - TextInputEditText phoneNumberEditText
            - ExtendedFloatingActionButton saveButton
            - String initialFullNameInput
            - String initialEmailInput
            - String initialPhoneInput

            + AccountFragment()
            + View onCreateView(LayoutInflater, ViewGroup, Bundle)
            + void checkUserInFirestore(FirestoreUserCallback)
            + void showUserDetails(UserModel)
            + boolean DidInfoRemainConstant()
            + void SetSaveButtonColor(boolean)
        }
    class FacilityFragment {
        - facilityView: FacilityView
        - facility: FacilityModel
        - facilityController: FacilityController
        - deviceId: String
        - db: FirebaseFirestore
        - facilitiesRef: CollectionReference
        - nameInput: TextInputEditText
        - addressInput: TextInputEditText
        - save: Button
        - initialFacilityNameInput: String
        - initialAddressInput: String
        + FacilityFragment()
        + onCreateView(inflater: LayoutInflater, container: ViewGroup, savedInstanceState: Bundle): View
        + showFacilityDetails(facility: FacilityModel)
        - DidInfoRemainConstant(): boolean
        - SetSaveButtonColor(isEqual: boolean)
        - facilityNameWatcher: TextWatcher
        - addressWatcher: TextWatcher
    }
    class BrowseEventsFragment {
        + BrowseEventsFragment() : Public empty constructor for fragment instantiation
        + View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) : Creates and inflates fragment view
        --
        "Represents a fragment for browsing events functionality."
        "Inflates layout defined in fragment_browse_events.xml"
        "Part of bottom navigation bar implementation"
    }
    class BrowseProfilesFragment {
        + BrowseProfilesFragment() : Public empty constructor for fragment instantiation
        + View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) : Creates and inflates fragment view
        --
        "Represents a fragment for browsing profiles functionality."
        "Inflates layout defined in fragment_browse_profiles.xml"
        "Part of bottom navigation bar implementation"
    }
    class BrowseFacilitiesFragment {
        + BrowseFacilitiesFragment() : Public empty constructor for fragment instantiation
        + View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) : Creates and inflates fragment view
        --
        "Represents a fragment for browsing facilities functionality."
        "Inflates layout defined in fragment_browse_facilities.xml"
        "Part of bottom navigation bar implementation"
        "Code for bottom navigation bar adapted from GeeksforGeeks"
    }
    class AdminAndUserFragment {
        + AdminAndUserFragment() : Public empty constructor for fragment instantiation
        + View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) : Creates and inflates fragment view
        --
        "Represents a fragment for admin and user functionality."
        "Inflates layout defined in fragment_admin_and_user.xml"
        "Part of bottom navigation bar implementation"
    }
    class EventFragment {
            + EventFragment() : Default constructor with initialization
            + EventFragment(EventModel event) : Constructor for specific event
            + void showEventDetails(EventModel event) : Displays event details
            + void onAttach(Context context) : Initializes event if null
            + View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) : Inflates layout and sets up UI
            + void showDatePickerDialog(EditText dateToPick, AtomicReference<Date> dateReference, Date startDate) : Displays date picker
            + TextWatcher costEditWatcher : Validates cost input formatting
            --
            "Handles event creation, modification, and details display."
            "Manages event validation and user interactions."
            "Connects with EventController and Firebase for persistence."
            "Controls UI elements for event information."
        }
    EventFragment o-- EventController : has-a
    EventFragment o-- EventModel : has-a
    AccountFragment *-- UserModel
    AccountFragment *-- FirestoreUserCallback
    FacilityFragment --> FacilityView : uses
    FacilityFragment --> FacilityModel : has
    FacilityFragment --> FacilityController : uses
    HomeFragment --> EventsController : uses
    HomeFragment --> EventArrayAdapter : uses
    HomeFragment --> EventsModel : has
    HomeFragment --> EventModel : uses

    class AccountUserController extends AbstractController {
        ' Attributes
        - UserModel userModel

        ' Constructors
        + AccountUserController(UserModel user)

        ' Methods
        + UserModel getModel()
        + void updateName(String name)
        + void updateEmail(String email)
        + void updatePhone(String phone)
        + boolean getSavedToFirebase()
        + void saveToFirestore(String name, String email, String phone)

        ' Responsibilities
        note right of AccountUserController
            - Acts as the controller between the view and the `UserModel`.
            - Allows updates to user data such as name, email, and phone.
            - Ensures that changes to the model are reflected in the underlying data (Firestore).
            - Ensures that the user data is saved or updated in Firestore.
        end note
    }

    AccountUserController --> "1" UserModel : Manages the state of

    class AccountView {
        - accountFragment: AccountFragment
        - user: UserModel
        + AccountView(user: UserModel, accountFragment: AccountFragment)
        + getModel(): UserModel
        + update(whoUpdatedMe: AbstractModel)
    }
    class EventView {
        - eventFragment: EventFragment
        + EventView(event: EventModel, fragment: EventFragment)
        + getModel(): EventModel
        + update(whoUpdatedMe: AbstractModel)
    }
    class FacilityView {
        - facilityFragment: FacilityFragment
        - facility: FacilityModel
        + FacilityView(facility: FacilityModel, facilityFragment: FacilityFragment)
        + getModel(): FacilityModel
        + update(whoUpdatedMe: AbstractModel)
    }
    class EventController extends AbstractController {
        ' Attributes
        - EventModel eventModel

        ' Constructors
        + EventController(EventModel event)

        ' Methods
        + EventModel getModel()
        + void updateTitle(String title)
        + void updateDescription(String description)
        + void updateNumberOfSpots(int spots)
        + void updateNumberOfMaxEntrants(int maxEntrants)
        + void updateStartDate(Date startDate)
        + void updateEndDate(Date endDate)
        + void updateCost(double cost)
        + void updateGeo(boolean geo)
        + void saveEventToFirestore()
        + void removeEventFromFirestore()
        + void returnToEvents()

        ' Responsibilities
        note right of EventController
            - Acts as the controller for managing events in the application.
            - Updates the state of the `EventModel`, such as title, description, and dates.
            - Saves and removes event data from Firestore.
            - Replaces the current fragment view with `HomeFragment` after certain actions.
        end note
    }

    ' Dependencies and Relationships to other models and components
    EventController --> "1" EventModel : Manages the state of
    EventController --> "1" MyApp : Accesses for fragment replacements
    EventController --> "1" HomeFragment : Navigates to after saving/removing event
    EventController -|> AbstractController : Inherits
    class EventsController extends AbstractController {
        ' Attributes
        - EventsModel eventsModel

        ' Constructors
        + EventsController(EventsModel events)

        ' Methods
        + EventsModel getModel()
        + void getMyEvents(EventsModel.MyEventsCallback events)
        + void addEvent()
        + void editEvent(EventModel event)

        ' Responsibilities
        note right of EventsController
            - Acts as the controller for managing multiple events in the application.
            - Retrieves a list of events through the `getMyEvents()` method.
            - Provides functionality to add or edit events by navigating to the `EventFragment` view.
        end note
    }

    class FacilityController extends AbstractController {
        ' Attributes
        - FirebaseFirestore db
        - CollectionReference facilitiesRef

        ' Constructors
        + FacilityController(FacilityModel facility, FirebaseFirestore db)

        ' Methods
        + FacilityModel getModel()
        + void updateFacilityName(String name)
        + void updateAddress(String address)
        + void saveToFirestore()

        ' Responsibilities
        note right of FacilityController
            - Acts as the controller for managing interactions with a facility in the application.
            - Updates the facility's information, such as its name and address.
            - Synchronizes changes to Firestore to persist facility data.
        end note
    }

    ' Dependencies and Relationships to other models and components
    FacilityController --> "1" FacilityModel : Manages the state of

    ' Dependencies and Relationships to other models and components
    EventsController --> "1" EventsModel : Manages the state of
    EventsController --> "1" EventModel : Edits a specific event
    EventsController --> "1" MyApp : Accesses for fragment replacements
    EventsController --> "1" EventFragment : Navigates to the event fragment for adding or editing events
    EventsController -|> AbstractController : Inherits
    EventView --> EventFragment : uses
    EventView --> EventModel : observes
    EventView --> AbstractView : extends
    EventView --> AbstractModel : updates
    AccountView --> AccountFragment : uses
    AccountView --> UserModel : observes
    AccountView --> AbstractView : extends
    AccountView --> AbstractModel : updates
    FacilityView --> FacilityFragment : uses
    FacilityView --> FacilityModel : observes
    FacilityView --> AbstractView : extends
    FacilityView --> AbstractModel : updates

    abstract class AbstractView {
        - model: AbstractModel
        + startObserving(model: AbstractModel)
        + closeView()
        + update(whoUpdatedMe: AbstractModel)
        + getModel(): AbstractModel
    }
    abstract class AbstractController {
        - model: AbstractModel
        + AbstractController(model: AbstractModel)
        + getModel(): AbstractModel
    }
    abstract class AbstractModel {
        - views: Set<AbstractView>
        + addView(view: AbstractView)
        + removeView(view: AbstractView)
        + notifyViews()
    }

    AbstractModel --> AbstractView : notifies
    AbstractModel "1" o-- "0..*" AbstractView : maintains observers
    AbstractController --> AbstractModel : manages
    AbstractView --> AbstractModel : observes

    class EventArrayAdapter {
        - listener: EventArrayAdapterListener
        + EventArrayAdapter(context: Context, events: ArrayList<EventModel>, listener: EventArrayAdapterListener)
        + getView(position: int, convertView: View, parent: ViewGroup): View
    }

    interface EventArrayAdapterListener {
        + onEventsWaitListChanged()
    }



AccountFragment *-- AccountUserController
AccountFragment *-- AccountView
AccountFragment o-- FirestoreUserCallback
AccountFragment *-- UserModel : user
AccountFragment *-- FirebaseFirestore : db
AccountFragment --> AccountUserController : userController
AccountFragment --> AccountView : accountView

@enduml
